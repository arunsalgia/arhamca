import React, { useState ,useContext, useEffect} from 'react';
import axios from "axios";
import Avatar from '@material-ui/core/Avatar';
import Button from '@material-ui/core/Button';
import CssBaseline from '@material-ui/core/CssBaseline';
// import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import globalStyles from "assets/globalStyles";
import Container from '@material-ui/core/Container';
import { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';
import { useHistory } from "react-router-dom";
import Modal from 'react-modal';
import modalStyles from 'assets/modalStyles';

import {getUserBalance, groupfeebreakup, feebreakup, getGroupCost} from "views/functions.js"
import {setTab} from "CustomComponents/CricDreamTabs.js"
import {BlankArea, DisplayBalance, DisplayCancel} from "CustomComponents/CustomComponents.js"
import {red, blue} from '@material-ui/core/colors';

const useStyles = makeStyles((theme) => ({
  paper: {
    marginTop: theme.spacing(8),
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  avatar: {
    margin: theme.spacing(1),
    backgroundColor: theme.palette.secondary.main,
  },
  form: {
    width: '100%', // Fix IE 11 issue.
    marginTop: theme.spacing(1),
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
  },
  button: {
    margin: theme.spacing(0, 1, 0),
  },
 error:  {
      // right: 0,
      fontSize: '12px',
      color: red[700],
      // position: 'absolute',
      alignItems: 'center',
      marginTop: '0px',
  },
}));


export default function JoinGroup() {
  const classes = useStyles();
  const gClasses = globalStyles();
  const history = useHistory();
  const [registerStatus, setRegisterStatus] = useState(0);
  // const [ errorMsg, setErrorMessage ] = useState("");
  const [groupCode, setGroupCode] = useState(localStorage.getItem("joinGroupCode"));
  const [balance, setBalance] = useState({wallet: 0, bonus: 0});
  const [memberFee, setMemberFee] = useState(0);

	const [groupCost, setGroupCost] = useState(100);
	const [insufficientAmount, setInsufficientAmount] = useState(true);
	
  const [groupFee, setGroupFee] = useState({done: false, wallet: 0, bonus: 0});
  const [modalIsOpen,setIsOpen] = React.useState(false);
	
  function openModal() { setIsOpen(true); }
  function closeModal(){ setIsOpen(false); }
  function afterOpenModal() {
    // references are now sync'd and can be accessed.
    //subtitle.style.color = '#f00';
  }

  //console.log(localStorage.getItem("joinGroupCode"));
  // setTab(0); 
  useEffect(() => {
	  
	if (localStorage.getItem("saveBalance"))
      setBalance(JSON.parse(localStorage.getItem("saveBalance")));
  
    const a = async () => {
      let myBalance = await getUserBalance();
      setBalance(myBalance);
			localStorage.setItem("saveBalance", JSON.stringify(myBalance));

			let tmp = await getGroupCost();
			setGroupCost(tmp);
			
    };    
    a();
  }, []);

  const handleSubmit_org = async() => { 
    let fee = await feebreakup(groupCode, balance.bonus);
    console.log(fee);
    if (!fee.done) {
      setRegisterStatus(1000);
      return;
    }

    setGroupFee(fee);
    setMemberFee(fee.wallet + fee.bonus);
    openModal();
  }
  
	// Now do not check for balance. Already checked in home page before calling this page
	
	const handleSubmit = async() => { 
		
		// first get the group record
		let memberFee = -1;
		try {
			let response = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/group/getgroupbycode/${groupCode}`);
			memberFee = response.data.memberFee;
			setMemberFee(memberFee);
		}
		catch (err) {
		   console.log(err);	
			 return;
		}
		
		//console.log(balance.wallet, memberFee, groupCost);
		let tmp = (memberFee + groupCost) > balance.wallet;
		setInsufficientAmount(tmp);
		openModal();
	  return;
		
		
    let fee = await feebreakup(groupCode, balance.bonus);
    console.log(fee);
    if (!fee.done) {
      setRegisterStatus(1000);
      return;
    }

    try {
      let response = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/group/join/${groupCode}/${localStorage.getItem("uid")}/${fee.wallet}/${fee.bonus}`);
      console.log(response.data);
      // set this as default
      localStorage.setItem("gid", response.data.gid.toString());
      localStorage.setItem("groupName", response.data.name);
      localStorage.setItem("tournament", response.data.tournament);
      localStorage.setItem("admin", false);     // joiner is not admin
      
      setTab(process.env.REACT_APP_GROUPDETAILS);
    } catch (err) {
        setRegisterStatus(err.response.status);
    }
  }
	
	
  const handleConfirm = async() => {
    closeModal();

    if (groupFee.wallet > balance.wallet) {
      setTab(process.env.REACT_APP_ADDWALLET);
      return;
    } 

    try {
      let response = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/group/join/${groupCode}/${localStorage.getItem("uid")}/${groupFee.wallet}/${groupFee.bonus}`);
      console.log(response.data);
      // set this as default
      localStorage.setItem("gid", response.data.gid.toString());
      localStorage.setItem("groupName", response.data.name);
      localStorage.setItem("tournament", response.data.tournament);
      localStorage.setItem("admin", false);     // joiner is not admin
      
      //console.log("Group Join Success");
      //let myBalance = await getUserBalance();
      //setBalance(myBalance);
      setTab(process.env.REACT_APP_GROUPDETAILS);
    } catch (err) {
        setRegisterStatus(err.response.status);
    }
  }


  function ShowResisterStatus() {
    let myMsg;
    let myClass = classes.error;
    //console.log(`error code ${registerStatus}`);
    switch (registerStatus) {
      case 200:
        myMsg = `User successfully regisitered with group code ${groupCode}.`;
        myClass = classes.root;
        break;
      case 0:
          myMsg = "";
          myClass = classes.root;
          break;
        case 611:
        myMsg = "Invalid Group Code";
        break;
      case 612:
        myMsg = "Already member of this group";
        break;
      case 613:
        myMsg = "Invalid User";
        break;
      case 614:
        myMsg = "Cannot join group. Auction has already started.";
        break;
      case 615:
        myMsg = "Insufficient balance.";
        break;
      case 616:
        myMsg = "No room for new member.";
        break;
      case 617:
        myMsg = "Already member of the group";
        break;
      default:
        myMsg = "unknown error";
        break;
    }
    return(
      <div>
        <Typography className={myClass}>{myMsg}</Typography>
      </div>
    );
  }

  
  return (
    <Container component="main" maxWidth="xs">
      <DisplayBalance wallet={balance.wallet} bonus={balance.bonus} />
      <CssBaseline />
      <div className={classes.paper}>
        <Typography component="h1" variant="h5">Join Group</Typography>
    <ValidatorForm className={classes.form} onSubmit={handleSubmit}>
      <TextValidator
          variant="outlined"
          required
          fullWidth      
          label="Group Code"
          onChange={(event) => setGroupCode(event.target.value)}
          name="groupcode"
          // type=""
          // validators={['required']}
          // errorMessages={['Group code to be provided']}
          value={groupCode}
      />
      <ShowResisterStatus/>
      <BlankArea/>
      <div align="center">
        <Button type="submit" key={"create"} variant="contained" color="primary" size="small"
            className={classes.button}>Submit
        </Button>
      </div>
    </ValidatorForm>
    <Modal
      isOpen={modalIsOpen}
      onAfterOpen={afterOpenModal}
      onRequestClose={closeModal}
      style={modalStyles}
      contentLabel="Example Modal"
      ariaHideApp={false}
    >
      <DisplayCancel onCancel={closeModal} />
      {/* <BlankArea /> */}
      <DisplayBalance wallet={balance.wallet} bonus={balance.bonus}/>
      <BlankArea/>
      <Typography className={classes.new} align="center">
				MemberFee: {memberFee}
      </Typography>
      <Typography className={classes.new} align="center">
				Group Fee: {groupCost}
      </Typography>
      {/*<Typography className={classes.new} align="center">
        Wallet Amount : {groupFee.wallet}
      </Typography>
      <Typography className={classes.new} align="center">
        Bonus Amount : {groupFee.bonus}
      </Typography>*/}
      <BlankArea />
      <Typography className={gClasses.error} align="center">
        {((insufficientAmount) ? "Insufficient amount in wallet" : "")}
      </Typography>
      <BlankArea />
      <div align="center" >
      <Button key="modalbutton" variant="contained" color="primary" size="medium"
        className={classes.dashButton} onClick={handleConfirm}>
        {((insufficientAmount) ? "Add to Wallet" : "Confirm Group Join")}
      </Button>
      </div>
    </Modal>

    </div>
    </Container>
  );
}
