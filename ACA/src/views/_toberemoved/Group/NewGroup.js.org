import React, { useState ,useContext, useEffect} from 'react';
import axios from "axios";
import Avatar from '@material-ui/core/Avatar';
import Button from '@material-ui/core/Button';
import CssBaseline from '@material-ui/core/CssBaseline';
// import TextField from '@material-ui/core/TextField';
import Link from '@material-ui/core/Link';
import { Switch, Route } from 'react-router-dom';
import LockOutlinedIcon from '@material-ui/icons/LockOutlined';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import globalStyles from "assets/globalStyles";
// import Table from '@material-ui/core/Table';
// import TableBody from '@material-ui/core/TableBody';
// import TableCell from '@material-ui/core/TableCell';
// import TableContainer from '@material-ui/core/TableContainer';
// import TableHead from '@material-ui/core/TableHead';
// import TableRow from '@material-ui/core/TableRow';
// import Paper from '@material-ui/core/Paper';
import Radio from '@material-ui/core/Radio';
import RadioGroup from '@material-ui/core/RadioGroup';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormControl from '@material-ui/core/FormControl';
import FormLabel from '@material-ui/core/FormLabel';
import Container from '@material-ui/core/Container';
import Select from "@material-ui/core/Select";
import MenuItem from '@material-ui/core/MenuItem';
// import TextField from '@material-ui/core/TextField';
// import { UserContext } from "../../UserContext";
import { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';
import { useHistory } from "react-router-dom";
// import copy from 'copy-clipboard';
import {CopyToClipboard} from 'react-copy-to-clipboard';
import { DisplayPageHeader, JumpButton } from 'CustomComponents/CustomComponents';
import { getAllPrizeTable } from 'views/functions';

import Modal from 'react-modal';
import modalStyles from 'assets/modalStyles';


import {validateSpecialCharacters, validateInteger, 
  validateEmail, getUserBalance, feebreakup} from "views/functions.js";
import {BlankArea, NothingToDisplay, 
  DisplayPrizeTable, DisplayBalance,
  DisplayCancel
} from "CustomComponents/CustomComponents.js"
import {setTab} from "CustomComponents/CricDreamTabs.js"
import {red, blue, yellow} from '@material-ui/core/colors';

const NOFRACTION = 'Fraction not allowed';
const useStyles = makeStyles((theme) => ({
  groupCode: {
    fontSize: theme.typography.pxToRem(20),
    fontWeight: theme.typography.fontWeightBold,
    color: yellow[900]
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
  },
  new: {
    fontSize: theme.typography.pxToRem(18),
    fontWeight: theme.typography.fontWeightBold,
    //color: '#FFFFFF'
  },
}));

class ChildComp extends React.Component {

  componentDidMount()  {
    // custom rule will have name 'isPasswordMatch'
    // ValidatorForm.addValidationRule('isPasswordMatch', (value) => {
    //   return (this.props.p1 === this.props.p2)
    // });

    ValidatorForm.addValidationRule('minLength', (value) => {
      return (value.length >= 6)
    });

    ValidatorForm.addValidationRule('lessthanbalance', (value) => {
      // console.log(`${value}  ${this.props.p1}`)
      return (value <= this.props.p1);
    });

    ValidatorForm.addValidationRule('noSpecialCharacters', (value) => {
      return validateSpecialCharacters(value);
    });    

    ValidatorForm.addValidationRule('isNumeric', (value) => {
      // console.log("string: ", value);
      // console.log(value.toString());
      return validateInteger(value.toString());
    });
  }

  componentWillUnmount() {
    // remove rule when it is not needed
    ValidatorForm.removeValidationRule('minLength');
    ValidatorForm.removeValidationRule('lessthanbalance');
    ValidatorForm.removeValidationRule('noSpecialCharacters');
    ValidatorForm.removeValidationRule('isNumeric');
  }

  render() {
    return <br/>;
  }

}

const STARTMEMBERCOUNT = 2;
const STARTMEMBERFEE  = 100;
const STARTPRIZECOUNT = 1;

export default function CreateGroup() {
  const classes = useStyles();
  const gClasses = globalStyles();
  const history = useHistory();
  const [groupName, setGroupName] = useState("");
  // const [displayName, setDisplayName] = useState("");
  const [bidAmount, setBidAmount] = useState(1000);
  const [memberCount, setMemberCount] =useState(STARTMEMBERCOUNT);
  const [memberFee, setMemberFee] = useState(STARTMEMBERFEE);
  const [registerStatus, setRegisterStatus] = useState(0);
  const [tournamentData, setTournamentData] = useState([]);
  const [selectedTournament, SetSelectedTournament] = useState("");
  // const [ errorMessage, setErrorMessage ] = useState("");
  const [created, setCreate] = useState(false);
  const [groupCode, setGroupCode] = useState("");
  const [copyState, setCopyState] = useState({value: '', copied: false});
  const [balance, setBalance] = useState({wallet: 0, bonus: 0});
  const [prizeCount, setPrizeCount] = useState(STARTPRIZECOUNT);
  const [prizeTable, setPrizeTable] = useState([]);
  const [auctionCoins, setAuctionCoins] = useState(1000);
  const [masterPrizeTable, setMasterPrizeTable] = useState([]);
  const [newGid, setNewGid] = useState(0);
  const [isDisabled, setIsDisabled] = useState(false);
  const [createDisable, setCreateDisable] = useState(false);

  const [groupFee, setGroupFee] = useState({done: false, wallet: 0, bonus: 0});
  const [modalIsOpen,setIsOpen] = React.useState(false);
  function openModal() { setIsOpen(true); }
  function closeModal(){ setIsOpen(false); }
  function afterOpenModal() {
    // references are now sync'd and can be accessed.
    //subtitle.style.color = '#f00';
  }


  const handleSelectedTournament = (event) => {
    SetSelectedTournament(event.target.value);
  };
  
  useEffect(() => {
	if (localStorage.getItem("saveBalance"))
      setBalance(JSON.parse(localStorage.getItem("saveBalance")));
  
    const a = async () => {
        // var balres = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/wallet/balance/${localStorage.getItem("uid")}`);
        // setBalance(balres.data);
        let myBalance = await getUserBalance();
        setBalance(myBalance);
		localStorage.setItem("saveBalance", JSON.stringify(myBalance));
		
        var response = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/tournament/list/notstarted`); 
        // console.log("Getting tournament list");
        // console.log(response.data);
        setTournamentData(response.data);
        let selTournament = (response.data.length > 0) ? response.data[0].name : "";
        let myDisable = false;
        let myGroup = localStorage.getItem("cGroup");
        // console.log("Selected Group", myGroup);
        if (localStorage.getItem("cGroup").length > 0) {
          selTournament = localStorage.getItem("cGroup");
          localStorage.setItem("cGroup", "");
          myDisable = true;
        }
        SetSelectedTournament(selTournament);
        setIsDisabled(myDisable);
        let myTable = await getAllPrizeTable(STARTMEMBERFEE*STARTMEMBERCOUNT);
        // console.log(myTable);
        setMasterPrizeTable(myTable)
        setPrizeTable(myTable[STARTPRIZECOUNT-1]);
    };    
    a();
  }, []);

  // const handleChange = (event) => {
  //   const { user } = this.state;
  //   user[event.target.name] = event.target.value;
  //   this.setState({ user });
  // }

  const handleSubmit = async() => {
    let fee = await feebreakup(memberFee, balance.bonus);
    // console.log(fee);
    if (!fee.done) {
      setRegisterStatus(1000);
      return;
    }
    setGroupFee(fee);
    openModal();
  }

  const handleConfirm = async() => {
    closeModal();

    if (groupFee.wallet > balance.wallet) {
      setTab(process.env.REACT_APP_ADDWALLET);
      return;
    } 
   
    //setCreateDisable(true)
    setRegisterStatus(1001);
    //console.log("Submit command provided");
    //  /group/create/TeSt/8/1250/AUSINDT20
    // groupName  bidAmount selectedTournament
    try {
      const response = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/group/create/${groupName}/${localStorage.getItem("uid")}/${bidAmount}/${selectedTournament}/${memberCount}/${groupFee.wallet}/${groupFee.bonus}`);
      console.log(response.data);
      setNewGid(response.data.gid)      

      // set this as default
      let myGid = response.data.gid.toString();
      localStorage.setItem("gid", myGid);
      localStorage.setItem("groupName", response.data.name);
      localStorage.setItem("tournament", response.data.tournament);
      localStorage.setItem("admin", true);

      // let myBalance = await getUserBalance();
      // setBalance(myBalance);

      let xxx = await axios.get(`${process.env.REACT_APP_AXIOS_BASEPATH}/group/setprize/${myGid}/${prizeCount}`);

      // setCopyState({value: response.data._id})
      // setGroupCode(response.data._id);
      // setRegisterStatus(200);

      // jump to group detail
      setTab(process.env.REACT_APP_GROUPDETAILS);

    } catch (err) {
      setCreateDisable(false);
      setRegisterStatus(err.response.status);
      console.log(`error code is ${err.response.status}`)
    }
  }

  
  async function handleCountChange(event) {
    let idx = parseInt(event.target.value);
    setPrizeTable(masterPrizeTable[idx-1])
    setPrizeCount(idx);
  };


  function DisplayPrizeRadio(props) {
    let inumber = parseInt(props.number);
    let rDisabled = false;
      if (inumber > memberCount) rDisabled = true;
      if (groupCode !== "") rDisabled = true;
    return(
      <FormControlLabel
      value={props.number} label={props.number} labelPlacement="start" disabled={rDisabled} checked={prizeCount === inumber}
      control={<Radio color="primary" />}
      />
    );
  } 

  function DisplayMemberCount() {
    return (
    <div>
      <DisplayPageHeader headerName="Prize Count" groupName="" tournament=""/>
      <BlankArea />
      <FormControl component="fieldset" align="center">
      {/* <FormLabel component="legend" color="primary" align="center">Prize Count</FormLabel> */}
        <RadioGroup aria-label="position" name="position" value={prizeCount} onChange={handleCountChange} row>
          <DisplayPrizeRadio number="1"/>
          <DisplayPrizeRadio number="2"/>
          <DisplayPrizeRadio number="3"/>
          <DisplayPrizeRadio number="4"/>
          <DisplayPrizeRadio number="5"/>
        </RadioGroup>
      </FormControl>
    </div>
    );
  }

  function SelectPrizeCount() {
    // console.log(prizeTable);
    return (
      <div>
        <DisplayMemberCount/>
        <DisplayPrizeTable tableName={prizeTable}/>
      </div>
    )
  }

  function DisplayGroupCode() {
    let myText = copyState.value;  //process.env.REACT_APP_HOMEPAGE + "/joingroup/" + copyState.value
    if (groupCode.length > 0) {
      return (
      <div align="center">
        <DisplayPageHeader headerName="Group Code" groupName="" tournament=""/>
        <BlankArea/>
        <Typography className={gClasses.message10}>Share this code with your friends to join your group</Typography>
        <BlankArea/>
        <Typography className={classes.groupCode}>{groupCode}</Typography>
        <BlankArea/>
        <CopyToClipboard text={myText}
            onCopy={() => setCopyState({copied: true})}>
            <button>Copy to clipboard</button>
        </CopyToClipboard>
        {copyState.copied ? <span style={{color: 'blue'}}>Copied.</span> : null}
        <BlankArea />
      </div>       
      )
    } else {
      return  <NothingToDisplay/>;
    }
  }

  function ShowResisterStatus() {
    // console.log(`Status is ${registerStatus}`);
    let myMsg;
    let errmsg = true;
    switch (registerStatus) {
      case 1000:
        myMsg = `Successfully copied code to clipboard.`;
        errmsg = false;
        break;      
      case 1001:
        myMsg = `You group is being created. Please wait ...`;
        errmsg = false;
        break;      
        case 200:
        myMsg = `Successfully created group ${groupName}`;
        errmsg = false;
        break;
      case 0:
        myMsg = "";
        errmsg = false;
        break;
        case 601:
        myMsg = "Duplicate group Name";
        break;
        case 602:
        myMsg = "Invalid bid amount";
        break;
      case 603:
        myMsg = "Invalid User Id";
        break;
      case 604:
        myMsg = "Invalid Tournament";
        break;
      case 605:
        myMsg = "Insufficient Balance";
        break;
      default:
        myMsg = "unknown error";
        break;
    }
    let myClass = (errmsg) ? gClasses.error : gClasses.nonerror;
    return(
      <div>
        <Typography className={myClass}>{myMsg}</Typography>
      </div>
    );
  }

  async function changeMemberCount(newCount) {
    setMemberCount(newCount);
    //console.log(memberFee, newCount);
    let myTable = await getAllPrizeTable(memberFee*newCount);
    //console.log(myTable);
    setMasterPrizeTable(myTable)
    setPrizeCount(1);
    setPrizeTable(myTable[0]);
  }

  async function changeMemberFee(newFee) {
    setMemberFee(newFee);
    //console.log(newFee, memberCount);
    let myTable = await getAllPrizeTable(newFee*memberCount);
    //console.log(myTable);
    setMasterPrizeTable(myTable)
    setPrizeCount(1);
    setPrizeTable(myTable[0]);
  }

  function ShowJumpButtons() {
    if (groupCode.length > 0) {
      return (
        <div>
          <BlankArea />
          <JumpButton page={process.env.REACT_APP_GROUPDETAILS} text="Next (Group Details)" />
        </div>
      )
    } else
      return null;
  }


  return (
    <Container component="main" maxWidth="xs">
      <DisplayBalance wallet={balance.wallet} bonus={balance.bonus}/>
      <CssBaseline />
      <div align="center" className={gClasses.paper}>
        <Typography component="h1" variant="h5">
          Create New Group
        </Typography>
    <ValidatorForm className={gClasses.form} onSubmit={handleSubmit}>
      <Select labelId='tournament' id='tournament'
          variant="outlined"
          disabled={isDisabled}
          required
          fullWidth
          label="Tournament Name"
          name="tournamentName"
          id="tournamentList"
          value={selectedTournament}
          displayEmpty onChange={handleSelectedTournament}>
          {tournamentData.map(x =>
          <MenuItem key={x.name} value={x.name}>{x.name}</MenuItem>)}
        </Select>
      <BlankArea/> 
      <TextValidator
        disabled={groupCode !== ""}
        variant="outlined"
        required
        fullWidth      
        label="Group Name"
        onChange={(event) => setGroupName(event.target.value)}
        name="groupname"
        // type=""
        validators={['required', 'minLength', 'noSpecialCharacters']}
        errorMessages={['Group Name to be provided', 'Group Name should be of minimum 6 characters', 'Special characters not permitted']}
        value={groupName}
      />
      <BlankArea/>
      <div>
      <TextValidator
        disabled={groupCode !== ""}
        variant="outlined"
        required
        fullWidth      
        // size="small"  
        label="MemberCount"
        onChange={(event) => changeMemberCount(event.target.value)}
        name="membercount"
        type="number"
        validators={['required', 'minNumber:2', 'maxNumber:25', 'isNumeric']}
        errorMessages={['Member count to be provided', 'Group members cannot be less than 2', 'Group members cannot be more than 25', NOFRACTION]}
        value={memberCount}
      />
      <BlankArea/>
      <TextValidator
        disabled={groupCode !== ""}
        variant="outlined"
        required
        fullWidth    
        // size="small"  
        label="MemberFee"
        onChange={(event) => changeMemberFee(event.target.value)}
        name="membercount"
        type="number"
        validators={['required', 'minNumber:100', 'isNumeric']}
        errorMessages={['Member count to be provided', 'Member fee cannot be less than 100', NOFRACTION]}
        value={memberFee}
      />
      <BlankArea/>
      <TextValidator
        disabled={groupCode !== ""}
        variant="outlined"
        required
        fullWidth      
        // size="small"  
        label="Auction Coins"
        onChange={(event) => setBidAmount(event.target.value)}
        name="auctioncoins"
        type="number" 
        validators={['required', 'minNumber:1000', 'maxNumber:10000', 'isNumeric']}
        errorMessages={['Member count to be provided', 'Auction Coins cannot be less than 1000', NOFRACTION ]}
        value={bidAmount}
      />
      <BlankArea/>
      <SelectPrizeCount/>
      </div>
      <BlankArea/>
      <ShowResisterStatus/>
      <BlankArea/>
      <div align="center">
        <Button type="submit" key={"create"} variant="contained" color="primary" size="small"
            disabled={groupCode !== ""}
            className={gClasses.button}>Create
        </Button>
        {/* <Button key={"members"} variant="contained" color="primary" size="small"
            className={gClasses.button} onClick={handleCancel}>Cancel
        </Button> */}
      </div>
    </ValidatorForm>
    <Modal
      isOpen={modalIsOpen}
      onAfterOpen={afterOpenModal}
      onRequestClose={closeModal}
      style={modalStyles}
      contentLabel="Example Modal"
      ariaHideApp={false}
    >
      <DisplayCancel onCancel={closeModal} />
      {/* <BlankArea /> */}
      <DisplayBalance wallet={balance.wallet} bonus={balance.bonus}/>
      <BlankArea/>
      <Typography className={classes.new} align="center">
        {/*Member Fee   : {memberFee}*/}
				Group Fee   : {groupFee.wallet}
      </Typography>
      <Typography className={classes.new} align="center">
        Wallet Amout : {groupFee.wallet}
      </Typography>
      <Typography className={classes.new} align="center">
        Bonus Amount : {groupFee.bonus}
      </Typography>
      <BlankArea />
      <Typography className={gClasses.error} align="center">
        {((groupFee.wallet > balance.wallet) ? "Insufficent amount in wallet." : "")}
      </Typography>
      <BlankArea />
      <div align="center" >
      <Button key="modalbutton" variant="contained" color="primary" size="medium"
        className={classes.dashButton} onClick={handleConfirm}>
        {((groupFee.wallet > balance.wallet) ? "Add to Wallet" : "Confirm Group Create")}
      </Button>
      </div>
    </Modal>
    </div>
    <ChildComp p1={balance.wallet} p3={selectedTournament}/>   
    {/* <BlankArea />
    <DisplayGroupCode/> */}
    {/* <Switch>
      <Route  path='/admin/signin' component={SignIn} key="MemberList"/>
    </Switch> */}
    {/* <ShowJumpButtons />
    <BlankArea /> */}
    </Container>
  );
}
